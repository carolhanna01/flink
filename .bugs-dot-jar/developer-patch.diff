diff --git a/flink-table/flink-table-common/src/main/java/org/apache/flink/table/data/GenericArrayData.java b/flink-table/flink-table-common/src/main/java/org/apache/flink/table/data/GenericArrayData.java
index 08090127970..94060564892 100644
--- a/flink-table/flink-table-common/src/main/java/org/apache/flink/table/data/GenericArrayData.java
+++ b/flink-table/flink-table-common/src/main/java/org/apache/flink/table/data/GenericArrayData.java
@@ -244,39 +244,82 @@ public final class GenericArrayData implements ArrayData {
 	// Conversion Utilities
 	// ------------------------------------------------------------------------------------------
 
+	private boolean anyNull() {
+		for (Object element : (Object[]) array) {
+			if (element == null) {
+				return true;
+			}
+		}
+		return false;
+	}
+
+	private void checkNoNull() {
+		if (anyNull()) {
+			throw new RuntimeException("Primitive array must not contain a null value.");
+		}
+	}
+
 	@Override
 	public boolean[] toBooleanArray() {
-		return (boolean[]) array;
+		if (isPrimitiveArray) {
+			return (boolean[]) array;
+		}
+		checkNoNull();
+		return ArrayUtils.toPrimitive((Boolean[]) array);
 	}
 
 	@Override
 	public byte[] toByteArray() {
-		return (byte[]) array;
+		if (isPrimitiveArray) {
+			return (byte[]) array;
+		}
+		checkNoNull();
+		return ArrayUtils.toPrimitive((Byte[]) array);
 	}
 
 	@Override
 	public short[] toShortArray() {
-		return (short[]) array;
+		if (isPrimitiveArray) {
+			return (short[]) array;
+		}
+		checkNoNull();
+		return ArrayUtils.toPrimitive((Short[]) array);
 	}
 
 	@Override
 	public int[] toIntArray() {
-		return (int[]) array;
+		if (isPrimitiveArray) {
+			return (int[]) array;
+		}
+		checkNoNull();
+		return ArrayUtils.toPrimitive((Integer[]) array);
 	}
 
 	@Override
 	public long[] toLongArray() {
-		return (long[]) array;
+		if (isPrimitiveArray) {
+			return (long[]) array;
+		}
+		checkNoNull();
+		return ArrayUtils.toPrimitive((Long[]) array);
 	}
 
 	@Override
 	public float[] toFloatArray() {
-		return (float[]) array;
+		if (isPrimitiveArray) {
+			return (float[]) array;
+		}
+		checkNoNull();
+		return ArrayUtils.toPrimitive((Float[]) array);
 	}
 
 	@Override
 	public double[] toDoubleArray() {
-		return (double[]) array;
+		if (isPrimitiveArray) {
+			return (double[]) array;
+		}
+		checkNoNull();
+		return ArrayUtils.toPrimitive((Double[]) array);
 	}
 }
 
diff --git a/flink-table/flink-table-common/src/main/java/org/apache/flink/table/data/binary/BinaryArrayData.java b/flink-table/flink-table-common/src/main/java/org/apache/flink/table/data/binary/BinaryArrayData.java
index 40526d59550..06374d06f40 100644
--- a/flink-table/flink-table-common/src/main/java/org/apache/flink/table/data/binary/BinaryArrayData.java
+++ b/flink-table/flink-table-common/src/main/java/org/apache/flink/table/data/binary/BinaryArrayData.java
@@ -434,7 +434,7 @@ public final class BinaryArrayData extends BinarySection implements ArrayData, T
 
 	private void checkNoNull() {
 		if (anyNull()) {
-			throw new RuntimeException("Array can not have null value!");
+			throw new RuntimeException("Primitive array must not contain a null value.");
 		}
 	}
 
diff --git a/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/data/DataStructureConvertersTest.java b/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/data/DataStructureConvertersTest.java
index a74517cb170..610d53c42b9 100644
--- a/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/data/DataStructureConvertersTest.java
+++ b/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/data/DataStructureConvertersTest.java
@@ -198,10 +198,20 @@ public class DataStructureConvertersTest {
 				.convertedTo(Long.class, 123L),
 
 			TestSpec
-				.forDataType(ARRAY(BOOLEAN()))
+				.forDataType(ARRAY(BOOLEAN().notNull()))
 				.convertedTo(boolean[].class, new boolean[]{true, false, true, true})
 				.convertedTo(ArrayData.class, new GenericArrayData(new boolean[]{true, false, true, true})),
 
+			TestSpec
+				.forDataType(ARRAY(BOOLEAN()))
+				.convertedTo(Boolean[].class, new Boolean[]{true, null, true, true})
+				.convertedTo(ArrayData.class, new GenericArrayData(new Boolean[]{true, null, true, true})),
+
+			TestSpec
+				.forDataType(ARRAY(INT().notNull()))
+				.convertedTo(int[].class, new int[]{1, 2, 3, 4})
+				.convertedTo(Integer[].class, new Integer[]{1, 2, 3, 4}),
+
 			// arrays of TINYINT, SMALLINT, INTEGER, BIGINT, FLOAT, DOUBLE are skipped for simplicity
 
 			TestSpec
